package integration

//go:generate ../../../tools/cgocopy-generate/cgocopy-generate -input=native/structs.h -output=native/structs_meta.c -api=native/metadata_api.h

/*
#cgo CFLAGS: -I${SRCDIR}/../native2
#include "native/metadata_api.h"
#include "native/structs_meta.c"  // Generated metadata
#include "native/helpers.c"       // Test helper functions
*/
import "C"
import (
	"unsafe"

	"github.com/shaban/cgocopy/pkg/cgocopy2"
)

// Go struct definitions matching C structs

// SimplePerson matches the C SimplePerson struct.
type SimplePerson struct {
	ID     int32   `cgocopy:"id"`
	Score  float64 `cgocopy:"score"`
	Active bool    `cgocopy:"active"`
}

// User matches the C User struct.
type User struct {
	UserID   int32  `cgocopy:"user_id"`
	Username string `cgocopy:"username"`
	Email    string `cgocopy:"email"`
}

// Student matches the C Student struct with arrays.
type Student struct {
	StudentID int32      `cgocopy:"student_id"`
	Name      string     `cgocopy:"name"`
	Grades    [5]int32   `cgocopy:"grades"`
	Scores    [3]float32 `cgocopy:"scores"`
}

// Point3D matches the C Point3D struct.
type Point3D struct {
	X float64 `cgocopy:"x"`
	Y float64 `cgocopy:"y"`
	Z float64 `cgocopy:"z"`
}

// GameObject matches the C GameObject struct with nested Point3D.
type GameObject struct {
	Name     string  `cgocopy:"name"`
	Position Point3D `cgocopy:"position"`
	Velocity Point3D `cgocopy:"velocity"`
}

// AllTypes matches the C AllTypes struct with all primitive types.
type AllTypes struct {
	I8   int8    `cgocopy:"i8"`
	U8   uint8   `cgocopy:"u8"`
	I16  int16   `cgocopy:"i16"`
	U16  uint16  `cgocopy:"u16"`
	I32  int32   `cgocopy:"i32"`
	U32  uint32  `cgocopy:"u32"`
	I64  int64   `cgocopy:"i64"`
	U64  uint64  `cgocopy:"u64"`
	F32  float32 `cgocopy:"f32"`
	F64  float64 `cgocopy:"f64"`
	Flag bool    `cgocopy:"flag"`
}

// extractCMetadata reads C struct metadata generated by CGOCOPY_STRUCT macros
// and converts it to Go's CStructInfo format.
func extractCMetadata(cStructInfoPtr *C.cgocopy_struct_info) cgocopy2.CStructInfo {
	if cStructInfoPtr == nil {
		panic("nil C struct info pointer")
	}

	fieldCount := int(cStructInfoPtr.field_count)

	// Extract fields
	fields := make([]cgocopy2.CFieldInfo, fieldCount)

	// Access the fields array
	cFieldsSlice := (*[1 << 30]C.cgocopy_field_info)(unsafe.Pointer(cStructInfoPtr.fields))[:fieldCount:fieldCount]

	for i := 0; i < fieldCount; i++ {
		cField := &cFieldsSlice[i]

		fields[i] = cgocopy2.CFieldInfo{
			Name:      C.GoString(cField.name),
			Type:      C.GoString(cField._type),
			Offset:    uintptr(cField.offset),
			Size:      uintptr(cField.size),
			IsPointer: cField.is_pointer != 0,
			IsArray:   cField.is_array != 0,
			ArrayLen:  int(cField.array_len),
		}
	}

	return cgocopy2.CStructInfo{
		Name:   C.GoString(cStructInfoPtr.name),
		Size:   uintptr(cStructInfoPtr.size),
		Fields: fields,
	}
}

// Register all types with cgocopy2 using C metadata from CGOCOPY_STRUCT macros.
// This ensures we use the correct C struct offsets instead of Go struct offsets.
func init() {
	// Register SimplePerson - call getter function (static metadata not visible to CGO)
	if err := cgocopy2.PrecompileWithC[SimplePerson](
		extractCMetadata(C.get_SimplePerson_metadata()),
	); err != nil {
		panic(err)
	}

	// Register User
	if err := cgocopy2.PrecompileWithC[User](
		extractCMetadata(C.get_User_metadata()),
	); err != nil {
		panic(err)
	}

	// Register Student
	if err := cgocopy2.PrecompileWithC[Student](
		extractCMetadata(C.get_Student_metadata()),
	); err != nil {
		panic(err)
	}

	// Register Point3D
	if err := cgocopy2.PrecompileWithC[Point3D](
		extractCMetadata(C.get_Point3D_metadata()),
	); err != nil {
		panic(err)
	}

	// Register GameObject
	if err := cgocopy2.PrecompileWithC[GameObject](
		extractCMetadata(C.get_GameObject_metadata()),
	); err != nil {
		panic(err)
	}

	// Register AllTypes
	if err := cgocopy2.PrecompileWithC[AllTypes](
		extractCMetadata(C.get_AllTypes_metadata()),
	); err != nil {
		panic(err)
	}
}

// Go wrapper functions to call C code from tests

func CreateSimplePerson(id int32, score float64, active bool) unsafe.Pointer {
	return unsafe.Pointer(C.create_simple_person(C.int(id), C.double(score), C._Bool(active)))
}

func CreateUser(id int32, username, email string) unsafe.Pointer {
	return unsafe.Pointer(C.create_user(C.int(id), C.CString(username), C.CString(email)))
}

func FreeUser(ptr unsafe.Pointer) {
	C.free_user((*C.User)(ptr))
}

func CreateStudent(id int32, name string) unsafe.Pointer {
	return unsafe.Pointer(C.create_student(C.int(id), C.CString(name)))
}

func FreeStudent(ptr unsafe.Pointer) {
	C.free_student((*C.Student)(ptr))
}

func CreateGameObject(name string, px, py, pz, vx, vy, vz float64) unsafe.Pointer {
	return unsafe.Pointer(C.create_game_object(
		C.CString(name),
		C.double(px), C.double(py), C.double(pz),
		C.double(vx), C.double(vy), C.double(vz),
	))
}

func FreeGameObject(ptr unsafe.Pointer) {
	C.free_game_object((*C.GameObject)(ptr))
}

func CreateAllTypes() unsafe.Pointer {
	return unsafe.Pointer(C.create_all_types())
}

func CreateInt32(val int32) unsafe.Pointer {
	cInt := C.int(val)
	return unsafe.Pointer(&cInt)
}

func CreateFloat64(val float64) unsafe.Pointer {
	cDouble := C.double(val)
	return unsafe.Pointer(&cDouble)
}

func FreePointer(ptr unsafe.Pointer) {
	C.free(ptr)
}
